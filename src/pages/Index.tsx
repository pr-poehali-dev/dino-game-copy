import { useState, useEffect, useCallback } from "react";

const Index = () => {
  const [gameStarted, setGameStarted] = useState(false);
  const [score, setScore] = useState(0);
  const [gameOver, setGameOver] = useState(false);
  const [capibaraY, setCapibaraY] = useState(100);
  const [isJumping, setIsJumping] = useState(false);
  const [velocityY, setVelocityY] = useState(0);
  const [obstacles, setObstacles] = useState<{ x: number; id: number }[]>([]);
  const [secretCode, setSecretCode] = useState("");
  const [showSecretCode, setShowSecretCode] = useState(false);
  const [gameSpeed, setGameSpeed] = useState(3);

  const GROUND_HEIGHT = 100;
  const CAPIBARA_HEIGHT = 60;
  const JUMP_HEIGHT = 80;
  const OBSTACLE_WIDTH = 20;
  const OBSTACLE_HEIGHT = 40;

  // –ü—Ä—ã–∂–æ–∫ –∫–æ–ø–∏–±–∞—Ä—ã
  const jump = useCallback(() => {
    if (!isJumping && !gameOver) {
      setIsJumping(true);
      setVelocityY(8); // –ù–∞—á–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤–≤–µ—Ä—Ö
    }
  }, [isJumping, gameOver]);

  // –§–∏–∑–∏–∫–∞ –ø—Ä—ã–∂–∫–∞
  useEffect(() => {
    if (!gameStarted || gameOver) return;

    const gravity = 0.5; // –ì—Ä–∞–≤–∏—Ç–∞—Ü–∏—è
    const groundLevel = 100; // –£—Ä–æ–≤–µ–Ω—å –∑–µ–º–ª–∏

    const physicsLoop = setInterval(() => {
      setCapibaraY((prevY) => {
        const newY = prevY + velocityY;
        if (newY <= groundLevel) {
          // –ü—Ä–∏–∑–µ–º–ª–µ–Ω–∏–µ
          setIsJumping(false);
          setVelocityY(0);
          return groundLevel;
        }
        return newY;
      });

      setVelocityY((prevVelocity) => {
        if (isJumping) {
          return prevVelocity - gravity; // –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—é
        }
        return 0;
      });
    }, 16);

    return () => clearInterval(physicsLoop);
  }, [gameStarted, gameOver, isJumping, velocityY]);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à
  useEffect(() => {
    const handleKeyPress = (e: KeyboardEvent) => {
      if (e.code === "Space" || e.code === "ArrowUp") {
        e.preventDefault();
        if (!gameStarted) {
          setGameStarted(true);
          setGameOver(false);
          setScore(0);
          setObstacles([]);
          setSecretCode("");
          setShowSecretCode(false);
        } else {
          jump();
        }
      }
    };

    window.addEventListener("keydown", handleKeyPress);
    return () => window.removeEventListener("keydown", handleKeyPress);
  }, [gameStarted, jump]);

  // –ò–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
  useEffect(() => {
    if (!gameStarted || gameOver) return;

    const gameLoop = setInterval(() => {
      // –î–≤–∏–∂–µ–Ω–∏–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π
      setObstacles((prev) => {
        const newObstacles = prev
          .map((obs) => ({ ...obs, x: obs.x - gameSpeed }))
          .filter((obs) => obs.x > -OBSTACLE_WIDTH);

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è —Å —É—á–µ—Ç–æ–º —Å–∫–æ—Ä–æ—Å—Ç–∏
        if (newObstacles.length === 0) {
          newObstacles.push({
            x: 800,
            id: Date.now(),
          });
        } else {
          const lastObstacle = newObstacles[newObstacles.length - 1];
          // –£—á–∏—Ç—ã–≤–∞–µ–º –¥–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä—ã–∂–∫–∞: –∑–∞ 500–º—Å –ø—Ä—ã–∂–∫–∞ –∫–æ–ø–∏–±–∞—Ä–∞ –ø—Ä–æ–ª–µ—Ç–∏—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
          const jumpDistance = gameSpeed * 30; // –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–æ–ª–µ—Ç–∏—Ç –∫–æ–ø–∏–±–∞—Ä–∞ –∑–∞ –≤—Ä–µ–º—è –ø—Ä—ã–∂–∫–∞
          const capibaraWidth = 50; // –®–∏—Ä–∏–Ω–∞ –∫–æ–ø–∏–±–∞—Ä—ã
          const obstacleWidth = OBSTACLE_WIDTH;

          // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ = –¥–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä—ã–∂–∫–∞ + –∑–∞–ø–∞—Å
          const minDistance = jumpDistance + capibaraWidth + obstacleWidth + 20; // +20 –¥–ª—è –∑–∞–ø–∞—Å–∞
          const maxDistance = minDistance + gameSpeed * 25; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
          const targetDistance =
            minDistance + Math.random() * (maxDistance - minDistance);

          if (lastObstacle.x < 800 - targetDistance) {
            newObstacles.push({
              x: 800,
              id: Date.now(),
            });
          }
        }

        return newObstacles;
      });

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç –º–µ–¥–ª–µ–Ω–Ω–µ–µ
      setScore((prev) => prev + 0.1);

      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –∏–≥—Ä—ã –∑–∞–º–µ—Ç–Ω–æ
      setGameSpeed((prev) => Math.min(prev + 0.02, 12));
    }, 16);

    return () => clearInterval(gameLoop);
  }, [gameStarted, gameOver, gameSpeed]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π
  useEffect(() => {
    if (!gameStarted || gameOver) return;

    const capibaraX = 100;
    const capibaraWidth = 50;
    const capibaraBottom = capibaraY;
    const capibaraTop = capibaraY + CAPIBARA_HEIGHT;

    obstacles.forEach((obstacle) => {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –ø–æ X
      const obstacleLeft = obstacle.x;
      const obstacleRight = obstacle.x + OBSTACLE_WIDTH;
      const capibaraLeft = capibaraX;
      const capibaraRight = capibaraX + capibaraWidth;

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –ø–æ Y
      const obstacleBottom = GROUND_HEIGHT;
      const obstacleTop = GROUND_HEIGHT + OBSTACLE_HEIGHT;

      if (
        capibaraRight > obstacleLeft &&
        capibaraLeft < obstacleRight &&
        capibaraTop > obstacleBottom &&
        capibaraBottom < obstacleTop
      ) {
        setGameOver(true);
      }
    });
  }, [obstacles, capibaraY, gameStarted, gameOver]);

  // –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ 100 –æ—á–∫–æ–≤
  useEffect(() => {
    if (Math.floor(score) >= 100 && !secretCode) {
      // –ò–º–∏—Ç–∞—Ü–∏—è "–±–µ–∫–µ–Ω–¥–∞" - –∑–¥–µ—Å—å –∫–æ–¥ —Å–ø—Ä—è—Ç–∞–Ω
      const hiddenCode = "SPacEKopUbarich";
      setSecretCode(hiddenCode);
      setShowSecretCode(true);
    }
  }, [score, secretCode]);

  const resetGame = () => {
    setGameStarted(false);
    setGameOver(false);
    setScore(0);
    setCapibaraY(100);
    setIsJumping(false);
    setVelocityY(0);
    setObstacles([]);
    setSecretCode("");
    setShowSecretCode(false);
    setGameSpeed(3);
  };

  return (
    <div className="min-h-screen bg-gray-100 flex flex-col items-center justify-center font-mono">
      {/* –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ */}
      {showSecretCode && (
        <div className="fixed top-4 left-1/2 transform -translate-x-1/2 bg-yellow-400 text-black px-4 py-2 rounded-lg shadow-lg z-50 animate-pulse">
          <div className="text-center">
            <div className="text-sm font-bold">
              üéâ –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!
            </div>
            <div className="text-lg font-mono">{secretCode}</div>
          </div>
        </div>
      )}

      {/* –ò–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ */}
      <div className="relative w-full max-w-4xl h-96 bg-white border-2 border-gray-300 overflow-hidden">
        {/* –°—á–µ—Ç */}
        <div className="absolute top-4 right-4 text-xl font-bold text-gray-700">
          {Math.floor(score).toString().padStart(5, "0")}
        </div>

        {/* –ö–æ–ø–∏–±–∞—Ä–∞ */}
        <div
          className={`absolute transition-all duration-300 ${isJumping ? "animate-bounce" : ""}`}
          style={{
            left: "100px",
            bottom: `${capibaraY}px`,
            width: "50px",
            height: "60px",
          }}
        >
          <img
            src="https://cdn.poehali.dev/files/b0db2baa-3cfa-4ec6-8f80-dfd641c54101.png"
            alt="–ö–æ–ø–∏–±–∞—Ä–∞"
            className="w-full h-full object-contain"
          />
        </div>

        {/* –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è */}
        {obstacles.map((obstacle) => (
          <div
            key={obstacle.id}
            className="absolute bg-gray-600"
            style={{
              left: `${obstacle.x}px`,
              bottom: `${GROUND_HEIGHT}px`,
              width: `${OBSTACLE_WIDTH}px`,
              height: `${OBSTACLE_HEIGHT}px`,
            }}
          />
        ))}

        {/* –ó–µ–º–ª—è */}
        <div
          className="absolute bottom-0 w-full bg-gray-300"
          style={{ height: `${GROUND_HEIGHT}px` }}
        />

        {/* –°—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω */}
        {!gameStarted && (
          <div className="absolute inset-0 bg-white bg-opacity-90 flex items-center justify-center">
            <div className="text-center">
              <h1 className="text-4xl font-bold mb-4 text-gray-800">
                –ö–æ–ø–∏–±–∞—Ä–∞ –†–∞–Ω–Ω–µ—Ä
              </h1>
              <p className="text-lg text-gray-600 mb-4">
                –ù–∞–∂–º–∏ –ü–†–û–ë–ï–õ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞
              </p>
              <div className="text-sm text-gray-500">
                –ò—Å–ø–æ–ª—å–∑—É–π –ü–†–û–ë–ï–õ –¥–ª—è –ø—Ä—ã–∂–∫–∞
              </div>
            </div>
          </div>
        )}

        {/* –≠–∫—Ä–∞–Ω –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã */}
        {gameOver && (
          <div className="absolute inset-0 bg-white bg-opacity-90 flex items-center justify-center">
            <div className="text-center">
              <h2 className="text-3xl font-bold mb-4 text-gray-800">
                –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!
              </h2>
              <p className="text-xl text-gray-600 mb-4">
                –°—á–µ—Ç: {Math.floor(score)}
              </p>
              {secretCode && (
                <div className="mb-4 p-4 bg-yellow-100 rounded-lg">
                  <div className="text-lg font-bold text-yellow-800">
                    –°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–æ–¥: {secretCode}
                  </div>
                </div>
              )}
              <button
                onClick={resetGame}
                className="px-6 py-3 bg-gray-800 text-white rounded-lg hover:bg-gray-700 transition-colors"
              >
                –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞
              </button>
            </div>
          </div>
        )}
      </div>

      {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
      <div className="mt-4 text-center text-gray-600 text-sm">
        <p>–ü–†–û–ë–ï–õ - –ø—Ä—ã–∂–æ–∫ | –î–æ—Å—Ç–∏–≥–Ω–∏ 100 –æ—á–∫–æ–≤ –¥–ª—è —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–¥–∞!</p>
      </div>
    </div>
  );
};

export default Index;
